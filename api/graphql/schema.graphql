# import Deck from "types/Deck.graphql"
# import FlashCard from "types/FlashCard.graphql"
# import CardModel from "types/CardModel.graphql"
# import Field from "types/Field.graphql"
# import FieldValue from "types/FieldValue.graphql"
# import Template from "types/Template.graphql"
# import Note from "types/Note.graphql"
# import User, UserRoles from "types/User.graphql"
# import ContentState from "types/ContentState.graphql"

scalar JSON
scalar JSONObject

directive @authenticate(roles: [String] = ["REGULAR"]) on FIELD_DEFINITION

# An object with a Globally Unique ID
interface Node {
  # The ID of the object.
  id: ID!
}

"""
App queries
"""
type Query {
  node(id: ID!): Node

  """
  Retrieve all decks for the logged user
  """
  decks(
    """
    Whether or not to filter only for decks to study
    """
    studyOnly: Boolean = false
  ): [Deck!] @authenticate

  """
  Retrieve all card models for the logged user
  """
  cardModels: [CardModel!] @authenticate

  """
  Get single deck
  """
  deck(slug: String!): Deck @authenticate

  """
  Get single card model
  """
  cardModel(id: ID!): CardModel @authenticate

  """
  Get single template
  """
  template(id: ID!): Template @authenticate

  """
  Get single note
  """
  note(id: ID!): Note @authenticate

  """
  Retrieves the next flashcard for a study
  session in the given deck
  """
  studyFlashCard(deckSlug: String!): FlashCard @authenticate

  """
  Get currently logged user
  """
  me: User @authenticate
}

"""
App mutations
"""
type Mutation {
  """
  Create a deck entity
  """
  createDeck(
    """
    Deck title
    """
    title: String!
    """
    Deck description
    """
    description: String
  ): Deck @authenticate

  """
  Delete a deck
  """
  deleteDeck(
    """
    Deck id
    """
    id: ID!
  ): Deck @authenticate

  """
  Update a deck
  """
  updateDeck(
    """
    Deck id
    """
    id: ID!
    """
    New title
    """
    title: String
    """
    New description
    """
    description: String
  ): Deck @authenticate

  """
  Publish a deck to the marketplace
  """
  publishDeck(
    """
    Deck id
    """
    id: ID!
  ): Deck @authenticate

  """
  Remove a deck from the marketplace
  """
  unpublishDeck(
    """
    Deck id
    """
    id: ID!
  ): Deck @authenticate

  """
  Create a new user
  """
  createUser(
    """
    User's username
    """
    username: String!
    """
    User's email
    """
    email: String!
    """
    User's password
    """
    password: String!
  ): User

  """
  Update user profile information
  """
  updateProfile(
    """
    New username
    """
    username: String
    """
    New password
    """
    password: String
    """
    Password confirmation
    """
    confirmPassword: String!
  ): User @authenticate

  """
  Create a new model
  """
  createModel(
    """
    Card model name
    """
    name: String!
    """
    Fields
    """
    fields: [FieldInput]
    """
    Templates
    """
    templates: [TemplateInput]
  ): CardModel @authenticate

  """
  Update model name
  """
  updateModel(name: String!): CardModel @authenticate

  """
  Deletes a card model and all associated entities
  """
  deleteModel(id: ID!): CardModel @authenticate

  """
  Adds a new template to a card model
  """
  addTemplateToModel(
    """
    Template name
    """
    name: String!
    """
    Model associated id
    """
    modelId: ID!
  ): Template @authenticate

  """
  Updates an existing template
  """
  updateTemplate(
    """
    Template id
    """
    id: ID!
    """
    Template name
    """
    name: String
    """
    Front side template
    """
    frontSide: ContentStateInput
    """
    Back side template
    """
    backSide: ContentStateInput
  ): Template @authenticate

  """
  Adds a new field to a card model
  """
  addFieldToModel(
    """
    Field name
    """
    name: String!
    """
    Model associated
    """
    modelId: ID!
  ): Field @authenticate

  """
  Create new note in deck
  """
  createNote(
    """
    Deck id
    """
    deckId: ID!
    """
    Model id
    """
    modelId: ID!
    """
    Values in note
    """
    fieldValues: [FieldValueInput!]!
  ): Note @authenticate

  """
  Delete a give note
  """
  deleteNote(
    """
    Note id
    """
    noteId: ID!
  ): Note @authenticate

  """
  Update the field value of a note
  """
  updateFieldValue(
    """
    Note id
    """
    noteId: ID!
    """
    Field id
    """
    fieldId: ID!
    """
    Field value content
    """
    data: ContentStateInput!
  ): FieldValue @authenticate

  answerFlashCard(
    """
    Note id
    """
    noteId: ID!
    """
    FlashCard id
    """
    flashCardId: ID!
    """
    Answer value
    """
    answer: FlashCardAnswer!
    """
    Time the user took to answer in milliseconds
    """
    timespan: Int!
  ): FlashCard! @authenticate
}
