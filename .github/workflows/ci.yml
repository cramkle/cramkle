name: CI
on:
  pull_request:
    types:
    - opened
    - synchronize
  push:
    branches:
    - main

jobs:
  install:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1
    - name: NodeJS 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - run: yarn install --frozen-lockfile --check-files
    - uses: actions/cache@v2
      id: cache-build
      with:
        path: ./*
        key: ${{ github.sha }}

  messages:
    runs-on: ubuntu-latest
    needs: install

    steps:
    - name: Restore cache
      uses: actions/cache@v2
      id: restore-build
      with:
        path: ./*
        key: ${{ github.sha }}
    - name: Check messages
      run: |
        yarn extract
        yarn compile --strict

  lint:
    runs-on: ubuntu-latest
    needs: install

    steps:
    - name: Restore cache
      uses: actions/cache@v2
      id: restore-build
      with:
        path: ./*
        key: ${{ github.sha }}
    - name: NodeJS 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Messages compilation
      run: yarn compile
    - name: Lint
      run: |
        yarn lint
        # TODO: Temporarily disabled
        # yarn lint:ts
        yarn lint:css

  test:
    runs-on: ubuntu-latest
    needs: install

    steps:
    - name: Restore cache
      uses: actions/cache@v2
      id: restore-build
      with:
        path: ./*
        key: ${{ github.sha }}
    - name: NodeJS 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Test App
      run: |
        yarn compile
        yarn test

  build:
    runs-on: ubuntu-latest
    needs: install

    steps:
    - name: Restore cache
      uses: actions/cache@v2
      id: restore-build
      with:
        path: ./*
        key: ${{ github.sha }}
    - name: NodeJS 12.x
      uses: actions/setup-node@v1
      with:
        node-version: 12.x
    - name: Build
      run: yarn build
    - uses: actions/upload-artifact@v2
      if: github.ref == 'refs/heads/main'
      with:
        name: build-artifact
        path: ./.dist

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_REGISTRY_SERVER }}
        username: ${{ secrets.ACR_REGISTRY_USERNAME }}
        password: ${{ secrets.ACR_REGISTRY_PASSWORD }}
    - uses: actions/checkout@v2
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Deploy image
      env:
        REGISTRY_SERVER: ${{ secrets.ACR_REGISTRY_SERVER }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      run: ./deploy.sh
